[[_using_issues]]
=== Using GitHub Issues

Use GitHub issues to record and discuss ideas, enhancements, tasks, and bugs. They make collaboration easier in a variety of ways, by:"
* Replacing email for project discussions, ensuring everyone on the team has the complete story.
* Allowing you to cross-link to other issues and pull requests.
* Creating a single, comprehensive record of how and why you made certain decisions.
* Allowing you to easily pull the right people into a conversation.

GitHub uses a syntax called (((Markdown)))Markdown to help you add basic text formatting to issues.

.Commonly Used Issue Features
[cols="1,4",options="header"]
|================================
| syntax            | Description
| `# Header`        | The `#` indicates a Header. # = Header 1, ## = Header 2, etc.
| `* List item`     | A single `*` followed by a space will create a bulleted list. You can also use a `-`.
| `**Bold item**`   | Two asterix `**` on either side of a string will make that text bold.
| `- [ ] Checklist` | A `-` followed by a space and `[ ]` will create a handy checklist in your issue or pull request.
| `@mention`        | When you @mention someone in an issue, they will receive a notification - even if they are not currently subscribed to the issue or watching the repository.
| `#975`            | A `#` followed by the number of an issue or pull request (without a space) in the same repository will create a cross-link.
| `:smiley:`        | Tone is easily lost in written communication. To help, GitHub allows you to drop emoji into your comments. Simply surround the emoji id with `:`.
|================================


You can use the preview tab to see how your comment will look on GitHub.
      - do: Include an issue attachment
        say: You can also add pictures by simply dragging and dropping them into the comment field, or clicking the file uploader link.
      - do: Click `Comment`
        say: Click the green comment button to add your comments to the discussion.
      - do: Return to the `Issues` view
        say: As you can imagine, a large project can have hundreds of issues. Let's look at a few ways your project team can organize issues.
      - do: "`Assign` the issue to the co-teacher"
        say: First, you can assign issues to anyone with access to the repo. Typically, this will be the person who is currently responsible for the next step in the life of the issue. The issue assignee may change over time.
      - do: Add a `label` to the issue
        say: You can also use labels to help you organize issues. GitHub comes with a number of built-in labels, but you can always delete those or add your own. As a project grows in size, using assignees and labels makes it much easier to find a specific issue.
      - do: "Click `Issues > Filters`"
        say: Filters allow you to easily search for Issues by creator, labels, assignees and more. We will continue to explore these features throughout the course. For now, let's practice creating an issue!
