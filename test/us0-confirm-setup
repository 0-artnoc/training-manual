#!/bin/bash
# This script contains tests for the scenarios used to determine that
# teach-class option 0 ran successfully.
#
# User Story: Confirm Setup
#
# As a GHE trainer,
# I want to confirm ~/.trainingmanualrc variables are set and set correctly,
# so that I can teach a GHE class.
#
# Acceptance Criteria / Scenarios:
# (1) ~/.trainingmanualrc exists
# (2) ~/.trainingmanualrc contains
#		export TOKEN_OWNER=$USER
# 	and	export TEACHER_PAT=<40-hex-char-string>
# 	and	export INSTANCE_URL='github.optum.com/api/v3'
# 	and	export ROOT_URL='github.optum.com'
# 	and	export CLASS_ORG='GHE-Training'
# (3) if $SHELL == /bin/bash then $HOME/.bashrc contains "source $HOME/.trainingmanualrc"
#	or if $SHELL == /bin/zsh then $HOME/.zshrc contains "source $HOME/.trainingmanualrc"
# (4) I can use $TOKEN_OWNER:$TEACHER_PAT to capture data from the GHE API
#

curdirnam=${PWD##*/}
if [ "$curdirnam" = "training-manual" ]; then test_prefix="./test"; fi
if [ "$curdirnam" = "script" ]; then test_prefix="../test"; fi
if [ "$curdirnam" = "test" ]; then test_prefix="."; fi

# shellcheck disable=SC1091 source=/dev/null 
source $test_prefix/us-common-functions

# expected settings of the environment variables in ~/.trainingmanualrc
expected_instance_url="github.optum.com/api/v3"
expected_root_url="github.optum.com"
expected_class_org="GHE-Training"

type="Scenario"

# Scenario 1: ~/.trainingmanualrc exists
step=1
checkTrainingmanualrcFile "$type" "$step"

# Scenario 2: ~/.trainingmanualrc contains properly set TOKEN_OWNER, TEACHER_PAT, INSTANCE_URL, ROOT_URL, & CLASS_ORG env vars
step=2
file="$HOME/.trainingmanualrc"
for var in {TOKEN_OWNER,TEACHER_PAT,INSTANCE_URL,ROOT_URL,CLASS_ORG}; do
#	shellcheck disable=SC2016,SC1001
	result=$(grep "$var" "$file" | awk 'BEGIN {FS="="} {print $2}' | tr -d "'")
	status=$(grep "$var" "$file")
	status=$?
	if [ 0 -ne "$status" ]; then
		addErr "$type $step: $HOME/.trainingmanualrc does not contain $var"
	fi
	if [ "$var" = "TOKEN_OWNER" ] && [ "$result" != "$USER" ]; then
		addErr "$type $step: $var <> $USER"
	fi
	if [ "$var" = "TEACHER_PAT" ] && ! [[ "$result" =~ ^[a-f0-9]{40}$ ]]; then
		addErr "$type $step: $var <> 40-char-hex"
	fi
	if [ "$var" = "INSTANCE_URL" ] && [ "$result" != "$expected_instance_url" ]; then
		addErr "$type $step: $var <> $expected_instance_url"
	fi
	if [ "$var" = "ROOT_URL" ] && [ "$result" != "$expected_root_url" ]; then
		addErr "$type $step: $var <> $expected_root_url"
	fi
	if [ "$var" = "CLASS_ORG" ] && [ "$result" != "$expected_class_org" ]; then
		addErr "$type $step: $var <> $expected_class_org"
	fi
done

# Scenario 3: ~/.${shell}rc sources trainingmanualrc
step=3
string="source $HOME/.trainingmanualrc"
if [ "$SHELL" = /bin/bash ]; then
	status=$(grep --quiet "$string" "$HOME"/.bashrc)
	status=$?
	if [ 0 -ne $status ]; then
		addErr "$type $step: $HOME/.bashrc does not contain $string"
	fi
elif [ "$SHELL" = /bin/zsh ]; then
	status=$(grep --quiet "$string" "$HOME"/.zshrc)
	status=$?
	if [ 0 -ne $status ]; then
		addErr "$type $step: $HOME/.zshrc does not contain $string"
	fi
fi

# Scenario 4: $TOKEN_OWNER:$TEACHER_PAT can capture data from the GHE API
step=4
checkAccessToAPI "$type" "$step"


printErrors "$type"
