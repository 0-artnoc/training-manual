#!/bin/bash
# This script contains tests for the scenarios used to determine that
# teach-class option 2 ran successfully.
#
# User Story: Add collaborators, create files
#
# As a GHE trainer,
# I want to create markdown files in the class repository,
# so that I can have students collaborate on changes in the training repository
#
# Background:
# (1) ~/.trainingmanualrc exists
# (2) I can use $TOKEN_OWNER:$TEACHER_PAT to capture data from the GHE API
# (3) $CLASS_REPO_NAME exists in https://$ROOT_URL/$CLASS_ORG
# (4) $CLASS_REPO_NAME Issue #1 exists
# (5) $CLASS_REPO_NAME has an issue #1 named "Comment here to be added as a collaborator"
#
# Acceptance Criteria / Scenarios:
# (1) $CLASS_REPO_NAME has added each $loginID of students who commented on issue #1 as a collaborator
# (2) $CLASS_REPO_NAME Open Issues count = 6
# (3) $CLASS_REPO_NAME Issue #2 exists
# (4) $CLASS_REPO_NAME has an issue #2 named "Activity 1: Your First Caption"
# (5) $CLASS_REPO_NAME Issue #3 exists
# (6) $CLASS_REPO_NAME has an issue #3 named "Add a New Slide"
# (7) $CLASS_REPO_NAME Issue #4 exists
# (8) $CLASS_REPO_NAME has an issue #4 named "Add a Caption to an Existing Slide"
# (9) $CLASS_REPO_NAME Issue #5 exists
# (10) $CLASS_REPO_NAME has an issue #5 named "Improve the README"
# (11) $CLASS_REPO_NAME Issue #6 exists
# (12) $CLASS_REPO_NAME has an issue #6 named "Restyle the Slides"
# (13) $CLASS_REPO_NAME is Private
# (14) $CLASS_REPO_NAME/tree/master/_posts contains file 0000-01-01-intro.md
# (15) $CLASS_REPO_NAME/tree/master/_posts contains file 0000-01-??-$loginID.md for each collaborator in the repo
#

curdirnam=${PWD##*/}
if [ "$curdirnam" = "training-manual" ]; then test_prefix="./test"; fi
if [ "$curdirnam" = "script" ]; then test_prefix="../test"; fi
if [ "$curdirnam" = "test" ]; then test_prefix="."; fi

# shellcheck disable=SC1091 source=/dev/null 
source $test_prefix/us-common-functions

CLASS_REPO_NAME=$1

if ! [[ $1 ]]; then
	printf "You must supply the Class Repository Name as a parameter"
	exit 1
fi


function setFilenum () {
	if [ "$counter" -le 9 ]; then
		filenum=0$counter
	else
		filenum=$counter
	fi

}


type="Background"

# Background 1: ~/.trainingmanualrc exists
step=1
checkTrainingmanualrcFile "$type" "$step"

# Background 2: I can use $TOKEN_OWNER:$TEACHER_PAT to capture data from the GHE API
step=2
checkAccessToAPI "$type" "$step"

# Background 3: $CLASS_REPO_NAME exists in https://$ROOT_URL/$CLASS_ORG
step=3
checkRepoExists "$type" "$step" "$CLASS_REPO_NAME"

# Background 4: $CLASS_REPO_NAME Issue #1 exists
step=4
issue=1
checkIssueNum "$type" "$step" "$CLASS_REPO_NAME" "$issue"

# Background 5: $CLASS_REPO_NAME has an issue #1 named "Comment here to be added as a collaborator"
step=5
issue=1
title="Comment here to be added as a collaborator"
checkIssueTitle "$type" "$step" "$CLASS_REPO_NAME" "$issue" "$title"

printErrors "$type"

type="Scenario"

commenters=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET https://"$INSTANCE_URL"/repos/"$CLASS_ORG"/"$CLASS_REPO_NAME"/issues/1/comments?per_page=100 | jq '.[].user.login')
#	shellcheck disable=SC2034	# passing collabs by reference below
collabs=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET https://"$INSTANCE_URL"/repos/"$CLASS_ORG"/"$CLASS_REPO_NAME"/collaborators?per_page=100 | jq '.[] | .login')
#	shellcheck disable=SC2034	# passing owners by reference below
owners=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET https://"$INSTANCE_URL"/orgs/"$CLASS_ORG"/members?role=admin | jq '.[] | .login')
creator=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET https://"$INSTANCE_URL"/repos/"$CLASS_ORG"/"$CLASS_REPO_NAME"/issues/1 | jq '.user.login' | (sed -e 's/^"//' -e 's/"$//'))


# Scenario 1: $CLASS_REPO_NAME has each $loginID of students who commented on issue #1 as a collaborator
step=1
for i in "${commenters[@]}"; do
	j=$(echo "$i" | (sed -e 's/^"//' -e 's/"$//'))
	f=0
	if containsElement "$i" collabs	# is this commenter a collaborator?
	then
		f=0
	else
		f=1
	fi
	if containsElement "$i" owners	# is this commenter an org owner (admin role)?
	then
		f=0
	else
		f=1
	fi
	if [ "$j" = "$creator" ]; then	# is this commenter the repo creator (in this case, creator of issue #1)?
		f=0
	fi
	if [ "$j" = "$TOKEN_OWNER" ]; then	# is this commenter the executor of this script?
		f=0
	fi
	if [ 1 -eq $f ]; then	# this commentor should be listed as a collaborator but is not
		addErr "$type $step: $j is NOT set as a collaborator but has commented on issue #1"
	fi
done

# Scenario 2: $CLASS_REPO_NAME Open Issues count = 6
step=2
expected_open_issue_count=6
checkOpenIssueCount "$type" "$step" "$CLASS_REPO_NAME" "$expected_open_issue_count"

# Scenario 3: $CLASS_REPO_NAME Issue #2 exists
step=3
issue=2
checkIssueNum "$type" "$step" "$CLASS_REPO_NAME" "$issue"

# Scenario 4: $CLASS_REPO_NAME has an issue #2 named "Activity 1: Your First Caption"
step=4
issue=2
title="Activity 1: Your First Caption"
checkIssueTitle "$type" "$step" "$CLASS_REPO_NAME" "$issue" "$title"

# Scenario 5: $CLASS_REPO_NAME Issue #3 exists
step=5
issue=3
checkIssueNum "$type" "$step" "$CLASS_REPO_NAME" "$issue"

# Scenario 6: $CLASS_REPO_NAME has an issue #3 named "Add A New Slide"
step=6
issue=3
title="Add A New Slide"
checkIssueTitle "$type" "$step" "$CLASS_REPO_NAME" "$issue" "$title"

# Scenario 7: $CLASS_REPO_NAME Issue #4 exists
step=7
issue=4
checkIssueNum "$type" "$step" "$CLASS_REPO_NAME" "$issue"

# Scenario 8: $CLASS_REPO_NAME has an issue #4 named "Add a Caption To an Existing Slide"
step=8
issue=4
title="Add a Caption To an Existing Slide"
checkIssueTitle "$type" "$step" "$CLASS_REPO_NAME" "$issue" "$title"

# Scenario 9: $CLASS_REPO_NAME Issue #5 exists
step=9
issue=5
checkIssueNum "$type" "$step" "$CLASS_REPO_NAME" "$issue"

# Scenario 10: $CLASS_REPO_NAME has an issue #5 named "Improve the README"
step=10
issue=5
title="Improve the README"
checkIssueTitle "$type" "$step" "$CLASS_REPO_NAME" "$issue" "$title"

# Scenario 11: $CLASS_REPO_NAME Issue #6 exists
step=11
issue=6
checkIssueNum "$type" "$step" "$CLASS_REPO_NAME" "$issue"

# Scenario 12: $CLASS_REPO_NAME has an issue #6 named "Restyle the Slides"
step=12
issue=6
title="Restyle the Slides"
checkIssueTitle "$type" "$step" "$CLASS_REPO_NAME" "$issue" "$title"

# Scenario 13: $CLASS_REPO_NAME is Private
step=13
isPrivate "$type" "$step" "$CLASS_REPO_NAME"

# Scenario 14: $CLASS_REPO_NAME _posts/ contains file 0000-01-01-intro.md
step=14
status=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -H "Accept: application/vnd.github.VERSION.raw" -X GET https://"$INSTANCE_URL"/repos/"$CLASS_ORG"/"$CLASS_REPO_NAME"/contents/_posts/0000-01-01-intro.md)
status=$?
if [ 0 -ne $status ]; then
	addErr "$type $step: 0000-01-01-intro.md does NOT exist"
fi

# Scenario 15: $CLASS_REPO_NAME/tree/master/_posts contains file 0000-01-$counter-$loginID.md for each collaborator in the repo
step=15
counter=2
filenum=02
# get the names of the people who should have a file - people who have commented on issue #1
#	shellcheck disable=SC2068,SC2086	# https://www.shellcheck.net/wiki/SC2068
for i in ${commenters[@]}; do
	j=$(echo "$i" | (sed -e 's/^"//' -e 's/"$//'))
#	echo "$j is a commenter"
	f=0
	if containsElement "$i" collabs	# is this commenter a collaborator?
	then
#		echo "$j is a collaborator"
		f=0
	fi
	if containsElement "$i" owners	# is this commenter an org owner (admin role or repo collabs with unrestricted push to master set) 
	then
#		echo "$j is an owner"
		f=0
	fi
	if [ "$j" = "$creator" ]; then	# is this commenter the repo creator (in this case, creator of issue #1)?
#		echo "$j is the creator"
		f=2
	fi
	if [ 0 -eq $f ]; then
		setFilenum
		status=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -H "Accept: application/vnd.github.VERSION.raw" -X GET https://"$INSTANCE_URL"/repos/"$CLASS_ORG"/"$CLASS_REPO_NAME"/contents/_posts/0000-01-"$filenum"-"$j".md)
		status=$?
		if [ 0 -eq $status ]; then
#			echo "Found student file 0000-01-$filenum-$j.md"
			((counter++))	# file exists, and it should
		else
			addErr "$type $step: collaborator $j does NOT have a 0000-01-$filenum-$j.md file"
		fi
	fi
done
setFilenum
# now check for the instructor's file
status=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -H "Accept: application/vnd.github.VERSION.raw" -X GET https://"$INSTANCE_URL"/repos/"$CLASS_ORG"/"$CLASS_REPO_NAME"/contents/_posts/0000-01-"$filenum"-"$creator".md)
status=$?
if [ 0 -eq $status ]; then
#	echo "Found instructor file 0000-01-$filenum-$creator.md"
	:	# file exists, do nothing
else
	addErr "$type $step: Facilitator $creator does NOT have a 0000-01-$filenum-$creator.md file"
fi


printErrors "$type"
