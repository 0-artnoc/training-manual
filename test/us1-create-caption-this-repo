#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu Feb 21 15:30:27 2019
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

#TODO: find a way to stop script if input prompt or sequence changes

set nArgs [llength $argv]
#puts "Number of Command Line Arguments : $nArgs"

if { $nArgs != 2 } { puts "Must have 2 arguments... arg1 as training REPO_NAME, arg2 as training TEACHER_ID"
                     exit 1   # exit if input parameters did not match
                  }
                  
set REPO_NAME [lindex $argv 0]
set TEACHER_ID [lindex $argv 1]


set timeout 30
spawn ./script/teach-class
match_max 100000
expect -exact "========================================================\r
This script manages the repos and activities\r
for the GitHub for Developers training.\r
========================================================\r
What would you like to do? (Just the number please)\r
0: Confirm Set-up\r
1: Create a new caption-this class repository\r
2: Add collabs and create files (also makes the repo private)\r
3: Grade the day 1 repo\r
4: Create conflict repos for each student\r
5: Grade the conflict repos\r
6: Create the github-games repos for each student\r
7: Expire student repos\r
8: Done\r
"
send -- "1\r"

expect -exact "What is the name of the day 1 repo?\r"
send -- "$REPO_NAME\r"

expect -exact "running script/new-virtual\r
This script creates a new caption-this repository\r
Let's add the class details to the README:\r
List the class dates.\r
Example: March 10 - 13, 2017.\r"
send -- "Jan 01-02, 2019\r"

expect -exact "Who is teaching? Without the @.\r"
send -- "$TEACHER_ID\r"
expect eof
