#!/bin/bash
# This script contains tests for the scenarios used to determine that
# teach-class option 1 ran successfully.
#
# User Story: Create the Caption-This Repository
#
# As a GHE trainer,
# I want to create a class repository,
# so that I can have students interact with a training repository
#
# Background:
# ~/.trainingmanualrc exists
# I can use $TOKEN_OWNER:$TEACHER_PAT to capture data from the GHE API
#
# Acceptance Criteria / Scenarios:
# (1) $CLASS_REPO_NAME is created in https://$ROOT_URL/$CLASS_ORG
# (2) $CLASS_REPO_NAME Open Issues count = 1
# (3) $CLASS_REPO_NAME Issue #1 exists
# (4) $CLASS_REPO_NAME has an issue #1 named "Comment here to be added as a collaborator"
# (5) $CLASS_REPO_NAME has one open project
# (6) $CLASS_REPO_NAME Project #1 has name "Class Activity: Caption Contest"
# (7) $CLASS_REPO_NAME Project #1 is in the open state
# (8) $CLASS_REPO_NAME README.md file exists 
# (9) $CLASS_REPO_NAME README.md file contains Facilitator: = @$TOKEN_OWNER (! "@TEACHER-HANDLE")
# (10) $CLASS_REPO_NAME README.md file contains Class Date: = some-text (! "THIS-DATE")
# (11) $CLASS_REPO_NAME is Public
#

CLASS_REPO_NAME=$1

ERRORS=()
ot_file=./temp-readme.md
GREP="/usr/bin/grep"
AWK="/usr/bin/awk"
RM="/bin/rm"

if ! [[ $1 ]]; then
	printf "You must supply the Class Repository Name as a parameter"
	exit 1
fi

type="Background"

# Background 1: ~/.trainingmanualrc exists
step=1
if [ ! -f "$HOME/.trainingmanualrc" ]; then
	ERRORS+=("$0: $type $step: $HOME/.trainingmanualrc does not exist")
fi

# Background 2: I can use $TOKEN_OWNER:$TEACHER_PAT to capture data from the GHE API
step=2
loginID=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET https://"$INSTANCE_URL"/users/"$TOKEN_OWNER" | jq .login | (sed -e 's/^"//' -e 's/"$//'))
if [ "$TOKEN_OWNER" != "$loginID" ]; then
	ERRORS+=("$0: $type $step: TOKEN_OWNER:TEACHER_PAT unable to access https://$INSTANCE_URL/users/$TOKEN_OWNER")
fi

type="Scenario"

# Scenario 1: Class repository name exists
step=1
result=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET https://"$INSTANCE_URL"/repos/"$CLASS_ORG"/"$CLASS_REPO_NAME" | jq .name | (sed -e 's/^"//' -e 's/"$//'))
if ! [ "$result" ]; then
	ERRORS+=("$0: $type $step: Could not access https://$INSTANCE_URL/repos/$CLASS_ORG/$CLASS_REPO_NAME")
elif [ "$result" != "$CLASS_REPO_NAME" ]; then
	ERRORS+=("$0: $type $step: $CLASS_REPO_NAME does not exist")
fi


# Scenario 2: Open issues count = 1
step=2
result=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET https://"$INSTANCE_URL"/repos/"$CLASS_ORG"/"$CLASS_REPO_NAME" | jq .open_issues_count)
status=$?
if [ 0 -ne $status ]; then
	ERRORS+=("$0: $type $step: Could not access https://$INSTANCE_URL/repos/$CLASS_ORG/$CLASS_REPO_NAME")
elif [ 1 -ne "$result" ]; then
	ERRORS+=("$0: $type $step: Open Issues Count <> 1")
fi


# Scenario 3: One issue (Issue #1) exists in $CLASS_REPO_NAME on GHE
step=3
result=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET https://"$INSTANCE_URL"/repos/"$CLASS_ORG"/"$CLASS_REPO_NAME"/issues/1 | jq .number)
status=$?
if [ 0 -ne $status ]; then
	ERRORS+=("$0: $type $step: Could not access https://$INSTANCE_URL/repos/$CLASS_ORG/$CLASS_REPO_NAME")
elif [ 1 -ne "$result" ]; then
	ERRORS+=("$0: $type $step: Issue #1 does not exist")
fi


# Scenario 4: Issue #1 has proper description
step=4
result=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET https://"$INSTANCE_URL"/repos/"$CLASS_ORG"/"$CLASS_REPO_NAME"/issues/1 | jq .title | (sed -e 's/^"//' -e 's/"$//'))
status=$?
if [ 0 -ne $status ]; then
	ERRORS+=("$0: $type $step: Could not access https://$INSTANCE_URL/repos/$CLASS_ORG/$CLASS_REPO_NAME/issues/1")
elif [ "$result" != "Comment here to be added as a collaborator" ]; then
	ERRORS+=("$0: $type $step: Class repository Issue #1 does not have expected description $result <> 'Comment here to be added as a collaborator'")
fi


# Scenario 5: Class repository has one project
step=5
result=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -H "Accept: application/vnd.github.inertia-preview+json" -X GET https://"$INSTANCE_URL"/repos/"$CLASS_ORG"/"$CLASS_REPO_NAME"/projects | jq .[].number)
status=$?
if [ 0 -ne $status ]; then
	ERRORS+=("$0: $type $step: Could not access https://$INSTANCE_URL/repos/$CLASS_ORG/$CLASS_REPO_NAME/projects")
elif [ 1 -ne "$result" ]; then
	ERRORS+=("$0: $type $step: Class repository does not have project #1")
fi


# Scenario 6: The class repository project has proper name
step=6
result=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -H "Accept: application/vnd.github.inertia-preview+json" -X GET https://"$INSTANCE_URL"/repos/"$CLASS_ORG"/"$CLASS_REPO_NAME"/projects | jq .[].name | (sed -e 's/^"//' -e 's/"$//'))
status=$?
if [ 0 -ne $status ]; then
	ERRORS+=("$0: $type $step: Could not access https://$INSTANCE_URL/repos/$CLASS_ORG/$CLASS_REPO_NAME/projects")
elif [ "$result" != "Class Activity: Caption Contest" ]; then
	ERRORS+=("$0: $type $step: Class repository Project #1 does not have expected name")
fi


# Scenario 7: Project is in the open state
step=7
result=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -H "Accept: application/vnd.github.inertia-preview+json" -X GET https://"$INSTANCE_URL"/repos/"$CLASS_ORG"/"$CLASS_REPO_NAME"/projects | jq .[].state | (sed -e 's/^"//' -e 's/"$//'))
status=$?
if [ 0 -ne $status ]; then
	ERRORS+=("$0: $type $step: Could not access https://$INSTANCE_URL/repos/$CLASS_ORG/$CLASS_REPO_NAME/projects")
elif [ "$result" != "open" ]; then
	ERRORS+=("$0: $type $step: Class repository Project #1 is not open")
fi


# Scenario 8: README.md file exists
step=8
status=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -H "Accept: application/vnd.github.VERSION.raw" -X GET https://"$INSTANCE_URL"/repos/"$CLASS_ORG"/"$CLASS_REPO_NAME"/contents/README.md > "$ot_file")
status=$?
if [ 0 -ne $status ]; then
	ERRORS+=("$0: $type $step: Could not access https://$INSTANCE_URL/repos/$CLASS_ORG/$CLASS_REPO_NAME/contents/README.md")
fi


# Scenario 9: README.md file contains Facilitator: = @$TOKEN_OWNER, (! "@TEACHER-HANDLE")
step=9
#	shellcheck disable=SC2016
facilitator=$($GREP "Facilitator:" "$ot_file" | $AWK 'BEGIN {FS=":"} {print $2}' | tr -d " ")
status=$($GREP "Facilitator:" "$ot_file")
status=$?
if [ 0 -ne $status ]; then
	ERRORS+=("$0: $type $step: Class repository README.md does not contain 'Facilitator:'")
elif [ "$facilitator" != "@$TOKEN_OWNER" ]; then
	ERRORS+=("$0: $type $step: Class repository README.md Facilitator: ($facilitator) not set to myself (@$TOKEN_OWNER) - OK if you are checking $facilitator's repository")
elif [ "$facilitator" = "@TEACHER-HANDLE" ]; then
	ERRORS+=("$0: $type $step: Class repository README.md Facilitator: not changed from TEACHER-HANDLE")
fi


# Scenario 10: README.md file contains Class Date: ! "THIS-DATE"
step=10
#	shellcheck disable=SC2016
class_dates=$($GREP "Class Date:" "$ot_file" | $AWK 'BEGIN {FS=":"} {print $2}')
status=$($GREP "Class Date:" "$ot_file")
status=$?
if [ 0 -ne $status ]; then
	ERRORS+=("$0: $type $step: Class repository README.md does not contain 'Class Date:'")
elif ! [ "$class_dates" ]; then
	ERRORS+=("$0: $type $step: Class repository README.md Class Date: not set")
elif [ "THIS-DATE" = "$class_dates" ]; then
	ERRORS+=("$0: $type $step: Class repository README.md Class Date: not changed from THIS-DATE")
fi


# Scenario 11: The class repository project is public
step=11
result=$(curl -s -u "$TOKEN_OWNER:$TEACHER_PAT" -X GET https://"$INSTANCE_URL"/repos/"$CLASS_ORG"/"$CLASS_REPO_NAME" | jq .private)
status=$?
if [ 0 -ne $status ]; then
	ERRORS+=("$0: $type $step: Could not access https://$INSTANCE_URL/repos/$CLASS_ORG/$CLASS_REPO_NAME")
elif [ "$result" != "false" ]; then
	ERRORS+=("$0: $type $step: Class repository is not Public")
fi


$RM "$ot_file"

if [ ${#ERRORS[@]} -eq 0 ]; then
	echo "No errors, hooray"
else
	echo "These scenarios FAILED:"
	for i in 1 to "${#ERRORS[@]}"; do
		echo "${ERRORS[i]}"
	done
	exit 1
fi
